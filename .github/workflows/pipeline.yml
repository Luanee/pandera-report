name: Pipeline

on:
  push:
    branches:
      - main
      - dev
      - bugfix
      - "release/*"
  pull_request:
    branches:
      - main
      - dev
      - bugfix
      - "release/*"

jobs:
  linting:
    name: Linter (${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version:  ${{ matrix.python-version }}
      - name: Update pip
        run: python -m pip install -U pip
      - uses: actions/cache@v3
        id: cache
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ runner.os }}-python-${{ env.pythonLocation }}-${{ hashFiles('pyproject.toml', 'requirements/requirements-dev.txt') }}-test-v05
      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: pip install -r requirements/requirements-dev.txt
      - name: Pip info
        run: python -m pip list

  testing:
    runs-on: ubuntu-latest
    env:
      PYTEST_FLAGS: --cov=pandera_report --cov=tests --cov-report=term-missing --cov-report=xml:coverage/coverage.xml --cov-append --cov-branch
    strategy:
      matrix:
        python-version: [ "3.9","3.10", "3.11" ]
        os:  [ macos-latest, ubuntu-latest, windows-latest ]
      fail-fast: false
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          # Issue ref: https://github.com/actions/setup-python/issues/436
          # cache: "pip"
          # cache-dependency-path: pyproject.toml
      - uses: actions/cache@v3
        id: cache
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ runner.os }}-python-${{ env.pythonLocation }}-${{ hashFiles('pyproject.toml', 'requirements/requirements-dev.txt') }}-test-v05
      - name: Install Dependencies
        run: python -m pip install --upgrade pip
      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: python -m pip install -r requirements/requirements-dev.txt
      - run: mkdir coverage
      - name: Test
        run: python -m pytest tests ${{ env.PYTEST_FLAGS }}
      - name: Store coverage files
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: coverage/coverage.xml
