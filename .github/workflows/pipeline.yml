name: Pipeline

on:
  push:
    branches:
      - main
      - dev
      - bugfix
      - "release/*"
  pull_request:
    branches:
      - main
      - dev
      - bugfix
      - "release/*"

jobs:
  lint:
    name: Linters (${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    defaults:
      run:
        shell: bash -l {0}

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip  # ubuntu location
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: python -m pip install pre_commit
      - name: Pip info
        run: python -m pip list

      - name: Sort Imports
        run: pre-commit run isort --all-files

      - name: Black
        if: always()
        run: pre-commit run black --all-files

      - name: Pylint
        if: always()
        run: pre-commit run pylint --all-files

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11"]
        pydantic-version: ["pydantic-v1", "pydantic-v2"]
      fail-fast: false
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          # Issue ref: https://github.com/actions/setup-python/issues/436
          # cache: "pip"
          # cache-dependency-path: pyproject.toml
      - uses: actions/cache@v3
        id: cache
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ runner.os }}-python-${{ env.pythonLocation }}-${{ matrix.pydantic-version }}-${{ hashFiles('pyproject.toml', 'requirements-dev.txt') }}-test-v05
      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: pip install -r requirements-dev.txt
      - name: Install Pydantic v1
        if: matrix.pydantic-version == 'pydantic-v1'
        run: pip install "pydantic>=1.10.0,<2.0.0"
      - name: Install Pydantic v2
        if: matrix.pydantic-version == 'pydantic-v2'
        run: pip install "pydantic>=2.0.2,<3.0.0"
      - run: mkdir coverage
      - name: Test
        run: pytest tests
      - name: Store coverage files
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: coverage
